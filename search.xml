<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>React Hooks + TypeScript 实战记录</title>
    <url>/2020/05/13/jd-share/</url>
    <content><![CDATA[<h1 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h1><h2 id="什么是-Hooks"><a href="#什么是-Hooks" class="headerlink" title="什么是 Hooks"></a>什么是 Hooks</h2><ul>
<li><code>React</code> 一直都提倡使用函数组件，但是有时候需要使用 <code>state</code> 或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有。</li>
<li><code>Hooks</code> 是 <code>React 16.8</code> 新增的特性，它可以让你在不编写 <code>class</code> 的情况下使用 <code>state</code> 以及其他的 <code>React</code> 特性。</li>
<li>如果你在编写函数组件并意识到需要向其添加一些 <code>state</code> ，以前的做法是必须将其它转化为 <code>class</code> 。现在你可以直接在现有的函数组件中使用 <code>Hooks</code> 。</li>
<li><code>use</code> 开头的 <code>React API</code> 都是 <code>Hooks</code>。</li>
</ul>
<h2 id="Hooks-解决了哪些问题"><a href="#Hooks-解决了哪些问题" class="headerlink" title="Hooks 解决了哪些问题?"></a>Hooks 解决了哪些问题?</h2><ul>
<li>状态逻辑难复用<ul>
<li>在组件之间复用状态逻辑很难，可能要用到 <code>render props</code> （渲染属性）或者 <code>HOC</code>（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是 div 元素），<strong>导致层级冗余</strong> 。</li>
</ul>
</li>
<li>趋向复杂难以维护<ul>
<li>在生命周期函数中混杂不相干的逻辑（如：在 <code>componentDidMount</code> 中注册事件以及其他的逻辑，在 <code>componentWillUnmount</code> 中卸载事件，这样分散不集中的写法，很容易写出 <code>Bug</code> ）。</li>
<li>类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件。</li>
</ul>
</li>
<li>this 指向问题<ul>
<li>父组件给子组件传递函数时，必须绑定 <code>this</code></li>
</ul>
</li>
</ul>
<h2 id="Hooks-优势"><a href="#Hooks-优势" class="headerlink" title="Hooks 优势"></a>Hooks 优势</h2><ul>
<li>能优化类组件的三大问题</li>
<li>能在无需修改组件结构的情况下复用状态逻辑（自定义 Hooks ）</li>
<li>能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）</li>
<li>副作用的关注点分离<ul>
<li>副作用指那些没有发生在数据向视图转换过程中的逻辑，如 <code>Ajax</code> 请求、访问原生 <code>DOM</code> 元素、本地持久化缓存、绑定/解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。</li>
</ul>
</li>
</ul>
<h2 id="常用-Hooks"><a href="#常用-Hooks" class="headerlink" title="常用 Hooks"></a>常用 Hooks</h2><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><ol>
<li><code>React</code> 假设当我们多次调用 <code>useState</code> 的时候，要保证每次渲染时它们的调用顺序是不变的。</li>
<li>通过在函数组件里调用它来给组件添加一些内部 <code>state</code> ，<code>React</code> 会 在重复渲染时保留这个 state</li>
<li><code>useState</code> 唯一的参数就是初始 <code>state</code></li>
<li><code>useState</code> 会返回一个数组：一个 <code>state</code> ，一个更新 <code>state</code> 的函数</li>
<li>在初始化渲染期间，返回的状态 <code>state</code> 与传入的第一个参数 <code>initialState</code> 值相同。<br>我们可以在事件处理函数中或其他一些地方调用更新 <code>state</code> 的函数。它类似 <code>class</code> 组件的 <code>this.setState</code>，但是它不会把新的 <code>state</code> 和旧的 <code>state</code> 进行合并，而是直接替换。</li>
</ol>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = useState(initialState);</span><br></pre></td></tr></table></figure>

<p>举个例子</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;p&gt;&#123;counter&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCounter(counter + 1)&#125;&gt;counter + 1&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Counter;</span></span><br></pre></td></tr></table></figure>

<h4 id="每次渲染都是一个独立的闭包"><a href="#每次渲染都是一个独立的闭包" class="headerlink" title="每次渲染都是一个独立的闭包"></a>每次渲染都是一个独立的闭包</h4><ul>
<li>每一次渲染都有它自己的 Props 和 State</li>
<li>每一次渲染都有它自己的事件处理函数</li>
<li>当点击更新状态的时候，函数组件都会重新被调用，那么每次渲染都是独立的，取到的值不会受后面操作的影响</li>
</ul>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">alertNumber</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 只能获取到点击按钮时的那个状态</span></span><br><span class="line">      alert(counter);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;p&gt;&#123;counter&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCounter(counter + 1)&#125;&gt;counter + 1&lt;/</span>button&gt;</span><br><span class="line">      &lt;button onClick=&#123;alertNumber&#125;&gt;alertCounter&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数式更新"><a href="#函数式更新" class="headerlink" title="函数式更新"></a>函数式更新</h4><p>如果新的 <code>state</code> 需要通过使用先前的 <code>state</code> 计算得出，那么可以将回调函数当做参数传递给 <code>setState</code>。该回调函数将接收先前的 <code>state</code>，并返回一个更新后的值。</p>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;p&gt;&#123;counter&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCounter(counter =&gt; counter + 10)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        counter + 10</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="惰性初始化"><a href="#惰性初始化" class="headerlink" title="惰性初始化"></a>惰性初始化</h4><ul>
<li><code>initialState</code> 参数只会在组件的初始化渲染中起作用，后续渲染时会被忽略</li>
<li>如果初始 <code>state</code> 需要通过复杂计算获得，则可以传入一个函数，在函数中计算并返回初始的 <code>state</code> ，此函数只在初始渲染时被调用</li>
</ul>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Counter render'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个函数只在初始渲染时执行一次，后续更新状态重新渲染组件时，该函数就不会再被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getInitState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getInitState'</span>);</span><br><span class="line">    <span class="comment">// 复杂的计算</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> [counter, setCounter] = useState(getInitState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;p&gt;&#123;counter&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCounter(counter + 1)&#125;&gt;+1&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ul>
<li><code>Hook</code> 内部使用 <code>Object.is</code>来比较新旧 <code>state</code> 是否相等</li>
<li>与 <code>class</code> 组件中的 <code>setState</code> 方法不同，如果你修改状态的时候，传的状态值没有变化，则不重新渲染</li>
<li>与 <code>class</code> 组件中的 <code>setState</code> 方法不同，<code>useState</code> 不会自动合并更新对象。我们可以用函数式的 <code>setState</code> 结合展开运算符来达到合并更新对象的效果</li>
</ul>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(&#123; <span class="attr">name</span>: <span class="string">'计数器'</span>, <span class="attr">number</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果修改状态的时候，传的状态值没有变化，则不重新渲染</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'render Counter'</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &#123;counter.name&#125;:&#123;counter.number&#125;</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button</span></span><br><span class="line"><span class="regexp">        onClick=&#123;() =&gt; setCounter(&#123; ...counter, number: counter.number + 1 &#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        + 1</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCounter(counter)&#125;&gt;==&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><ul>
<li>effect（副作用）：指那些没有发生在数据向视图转换过程中的逻辑，如 ajax 请求、访问原生dom 元素、本地持久化缓存、绑定/解绑事件、添加订阅、设置定时器、记录日志等。</li>
<li>副作用操作可以分两类：需要清除的和不需要清除的。</li>
<li>原先在函数组件内（这里指在 React 渲染阶段）改变 dom 、发送 ajax 请求以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性<br>useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API</li>
<li>useEffect 接收一个函数，该函数会在组件渲染到屏幕之后才执行，该函数有要求：要么返回一个能清除副作用的函数，要么就不返回任何内容</li>
<li>与 componentDidMount 或 componentDidUpdate 不同，使用 useEffect 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，effect 不需要同步地执行。在个别情况下（例如测量布局），有单独的 useLayoutEffect Hook 供你使用，其 API 与 useEffect 相同。</li>
</ul>
<h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App =&gt; <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;)</span><br><span class="line">  <span class="comment">// 或者</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;,[...])</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-class-组件实现修改标题"><a href="#使用-class-组件实现修改标题" class="headerlink" title="使用 class 组件实现修改标题"></a>使用 class 组件实现修改标题</h4><p>在这个 class 中，我们需要在两个生命周期函数中编写重复的代码，这是因为很多情况下，我们希望在组件加载和更新时执行同样的操作。我们希望它在每次渲染之后执行，但 React 的 class 组件没有提供这样的方法。即使我们提取出一个方法，我们还是要在两个地方调用它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    state = &#123;<span class="attr">number</span>:<span class="number">0</span>&#125;;</span><br><span class="line">    add = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">number</span>:<span class="keyword">this</span>.state.number+<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="keyword">this</span>.changeTitle();</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidUpdate()&#123;</span><br><span class="line">        <span class="keyword">this</span>.changeTitle();</span><br><span class="line">    &#125;</span><br><span class="line">    changeTitle = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">`你已经点击了<span class="subst">$&#123;<span class="keyword">this</span>.state.number&#125;</span>次`</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;&gt;</span><br><span class="line">              &lt;p&gt;&#123;<span class="keyword">this</span>.state.number&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">              &lt;button onClick=&#123;this.add&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用-useEffect-组件实现修改标题"><a href="#使用-useEffect-组件实现修改标题" class="headerlink" title="使用 useEffect 组件实现修改标题"></a>使用 useEffect 组件实现修改标题</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [number,setNumber] = useState(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// useEffect里面的这个函数会在第一次渲染之后和更新完成后执行</span></span><br><span class="line">    <span class="comment">// 相当于 componentDidMount 和 componentDidUpdate:</span></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">`你点击了<span class="subst">$&#123;number&#125;</span>次`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;p&gt;&#123;number&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;()=&gt;setNumber(number+1)&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="清除副作用"><a href="#清除副作用" class="headerlink" title="清除副作用"></a>清除副作用</h4><h4 id="跳过-Effect-进行性能优化"><a href="#跳过-Effect-进行性能优化" class="headerlink" title="跳过 Effect 进行性能优化"></a>跳过 Effect 进行性能优化</h4><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><h3 id="自定义-Hooks"><a href="#自定义-Hooks" class="headerlink" title="自定义 Hooks"></a>自定义 Hooks</h3><h3 id="useMemo、useCallback"><a href="#useMemo、useCallback" class="headerlink" title="useMemo、useCallback"></a>useMemo、useCallback</h3><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="什么是-TypeScript"><a href="#什么是-TypeScript" class="headerlink" title="什么是 TypeScript"></a>什么是 TypeScript</h2><p><code>TypeScript</code> 是 <code>JavaScript</code> 的一个超集，主要提供了<strong>类型系统</strong>和<strong>对 <code>ES6</code> 的支持</strong>。</p>
<p><img src="/images/ts-1.png" alt="TypeScript"></p>
<h2 id="为什么选择-TypeScript"><a href="#为什么选择-TypeScript" class="headerlink" title="为什么选择 TypeScript"></a>为什么选择 TypeScript</h2><ul>
<li><strong>TypeScript 增加了代码的可读性和可维护性</strong><ul>
<li>类型系统实际上是最好的文档，大部分的函数看看类型的定义就可以知道如何使用了</li>
<li>可以在编译阶段就发现大部分错误，这总比在运行时候出错好</li>
<li>增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等</li>
</ul>
</li>
<li><strong>TypeScript 非常包容</strong><ul>
<li>TypeScript 是 JavaScript 的超集，.js 文件可以直接重命名为 .ts 即可</li>
<li>即使不显式的定义类型，也能够自动做出类型推论</li>
<li>可以定义从简单到复杂的几乎一切类型</li>
<li>即使 TypeScript 编译报错，也可以生成 JavaScript 文件</li>
<li>兼容第三方库，即使第三方库不是用 TypeScript 写的，也可以编写单独的类型文件供 TypeScript 读取</li>
</ul>
</li>
<li><strong>TypeScript 拥有活跃的社区</strong><ul>
<li>大部分第三方库都有提供给 TypeScript 的类型定义文件</li>
<li>TypeScript 拥抱了 ES6 规范，也支持部分 ESNext 草案的规范</li>
</ul>
</li>
</ul>
<blockquote>
<p>了解了 React Hooks 和 TypeScript，接下来就一起看一下二者的结合实践吧！😄</p>
</blockquote>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>本实践来源于本人正在开发的开源组件库项目 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0h1aUF6aXIvQXppci1EZXNpZ24=">Azir Design<i class="fa fa-external-link-alt"></i></span>中的 <strong>Grid</strong> 栅格布局组件。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><img src="/images/grid-1.png" alt="Grid"></p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h3><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>className</td>
<td>类名</td>
<td>string</td>
<td>-</td>
</tr>
<tr>
<td>style</td>
<td>Row组件样式</td>
<td>object:CSSProperties</td>
<td>-</td>
</tr>
<tr>
<td>align</td>
<td>垂直对齐方式</td>
<td>top｜middle｜bottom</td>
<td>top</td>
</tr>
<tr>
<td>justify</td>
<td>水平排列方式</td>
<td>start｜end｜center｜space-around｜space-between</td>
<td>start</td>
</tr>
<tr>
<td>gutter</td>
<td>栅格间隔，可以写成像素值设置水平垂直间距或者使用数组形式同时设置 [水平间距, 垂直间距]</td>
<td>number｜[number,number]</td>
<td>0</td>
</tr>
</tbody></table>
<h3 id="Col"><a href="#Col" class="headerlink" title="Col"></a>Col</h3><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>className</td>
<td>类名</td>
<td>string</td>
<td>-</td>
</tr>
<tr>
<td>style</td>
<td>Col组件样式</td>
<td>object:CSSProperties</td>
<td>-</td>
</tr>
<tr>
<td>flex</td>
<td>flex 布局属性</td>
<td>string｜number</td>
<td>-</td>
</tr>
<tr>
<td>offset</td>
<td>栅格左侧的间隔格数，间隔内不可以有栅格</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td>order</td>
<td>栅格顺序</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td>pull</td>
<td>栅格向左移动格数</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td>push</td>
<td>栅格向右移动格数</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td>span</td>
<td>栅格占位格数，为 0 时相当于 display: none</td>
<td>number</td>
<td>-</td>
</tr>
<tr>
<td>xs</td>
<td>&lt;576px 响应式栅格，可为栅格数或一个包含其他属性的对象</td>
<td>number｜object</td>
<td>-</td>
</tr>
<tr>
<td>sm</td>
<td>≥576px 响应式栅格，可为栅格数或一个包含其他属性的对象</td>
<td>number｜object</td>
<td>-</td>
</tr>
<tr>
<td>md</td>
<td>≥768px 响应式栅格，可为栅格数或一个包含其他属性的对象</td>
<td>number｜object</td>
<td>-</td>
</tr>
<tr>
<td>lg</td>
<td>≥992px 响应式栅格，可为栅格数或一个包含其他属性的对象</td>
<td>number｜object</td>
<td>-</td>
</tr>
<tr>
<td>xl</td>
<td>≥1200px 响应式栅格，可为栅格数或一个包含其他属性的对象</td>
<td>number｜object</td>
<td>-</td>
</tr>
<tr>
<td>xxl</td>
<td>≥1600px 响应式栅格，可为栅格数或一个包含其他属性的对象</td>
<td>number｜object</td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="大展身手"><a href="#大展身手" class="headerlink" title="大展身手"></a>大展身手</h2><blockquote>
<p>这一实践主要介绍 React Hooks + TypeScript 的实践，不对 CSS 过多赘述。</p>
</blockquote>
<h3 id="Step-1-根据-API-来给-Row-组件定义-Prop-的类型"><a href="#Step-1-根据-API-来给-Row-组件定义-Prop-的类型" class="headerlink" title="Step-1 根据 API 来给 Row 组件定义 Prop 的类型"></a>Step-1 根据 API 来给 Row 组件定义 Prop 的类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Row.tsx</span></span><br><span class="line"></span><br><span class="line">+ <span class="keyword">import</span> React, &#123; CSSProperties, ReactNode &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line">+ <span class="keyword">import</span> <span class="keyword">import</span> ClassNames <span class="keyword">from</span> <span class="string">'classnames'</span>;</span><br><span class="line">+</span><br><span class="line">+ type gutter = number | [number, number];</span><br><span class="line">+ type align = <span class="string">'top'</span> | <span class="string">'middle'</span> | <span class="string">'bottom'</span>;</span><br><span class="line">+ type justify = <span class="string">'start'</span> | <span class="string">'end'</span> | <span class="string">'center'</span> | <span class="string">'space-around'</span> | <span class="string">'space-between'</span>;</span><br><span class="line">+</span><br><span class="line">+ interface RowProps &#123;</span><br><span class="line">+   className?: string;</span><br><span class="line">+   align?: align;</span><br><span class="line">+   justify?: justify;</span><br><span class="line">+   gutter?: gutter;</span><br><span class="line">+   style?: CSSProperties;</span><br><span class="line">+   children?: ReactNode;</span><br><span class="line">+ &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Step-2-编写-Row-组件的基础骨架"><a href="#Step-2-编写-Row-组件的基础骨架" class="headerlink" title="Step-2 编写 Row 组件的基础骨架"></a>Step-2 编写 Row 组件的基础骨架</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Row.tsx</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">import</span> React, &#123; CSSProperties, ReactNode &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line">+ <span class="keyword">import</span> React, &#123; CSSProperties, ReactNode, FC &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ClassNames <span class="keyword">from</span> <span class="string">'classnames'</span>;</span><br><span class="line"></span><br><span class="line">type gutter = number | [number, number];</span><br><span class="line">type align = <span class="string">'top'</span> | <span class="string">'middle'</span> | <span class="string">'bottom'</span>;</span><br><span class="line">type justify = <span class="string">'start'</span> | <span class="string">'end'</span> | <span class="string">'center'</span> | <span class="string">'space-around'</span> | <span class="string">'space-between'</span>;</span><br><span class="line"></span><br><span class="line">interface RowProps &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">+ <span class="keyword">const</span> Row: FC&lt;RowProps&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">+   <span class="keyword">const</span> &#123; className, align, justify, children, style = &#123;&#125; &#125; = props;</span><br><span class="line">+   <span class="keyword">const</span> classes = ClassNames(<span class="string">'azir-row'</span>, className, &#123;</span><br><span class="line">+     [<span class="string">`azir-row-<span class="subst">$&#123;align&#125;</span>`</span>]: align,</span><br><span class="line">+     [<span class="string">`azir-row-<span class="subst">$&#123;justify&#125;</span>`</span>]: justify</span><br><span class="line">+   &#125;);</span><br><span class="line">+</span><br><span class="line">+   <span class="keyword">return</span> (</span><br><span class="line">+     <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">+       &#123;children&#125;</span></span><br><span class="line"><span class="xml">+     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">+   );</span><br><span class="line">+ &#125;;</span><br><span class="line"></span><br><span class="line">+ Row.defaultProps = &#123;</span><br><span class="line">+   align: <span class="string">'top'</span>,</span><br><span class="line">+   justify: <span class="string">'start'</span>,</span><br><span class="line">+   gutter: <span class="number">0</span></span><br><span class="line">+ &#125;;</span><br><span class="line"></span><br><span class="line">+ <span class="keyword">export</span> <span class="keyword">default</span> Row;</span><br></pre></td></tr></table></figure>

<h3 id="Step-3-根据-API-来给-Col-组件定义-Prop-的类型"><a href="#Step-3-根据-API-来给-Col-组件定义-Prop-的类型" class="headerlink" title="Step-3 根据 API 来给 Col 组件定义 Prop 的类型"></a>Step-3 根据 API 来给 Col 组件定义 Prop 的类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Col.tsx</span></span><br><span class="line"></span><br><span class="line">+ <span class="keyword">import</span> React, &#123;ReactNode, CSSProperties &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line">+ <span class="keyword">import</span> ClassNames <span class="keyword">from</span> <span class="string">'classnames'</span>;</span><br><span class="line">+</span><br><span class="line">+ interface ColCSSProps &#123;</span><br><span class="line">+   offset?: number;</span><br><span class="line">+   order?: number;</span><br><span class="line">+   pull?: number;</span><br><span class="line">+   push?: number;</span><br><span class="line">+   span?: number;</span><br><span class="line">+ &#125;</span><br><span class="line">+</span><br><span class="line">+ <span class="keyword">export</span> interface ColProps &#123;</span><br><span class="line">+   className?: string;</span><br><span class="line">+   style?: CSSProperties;</span><br><span class="line">+   children?: ReactNode;</span><br><span class="line">+   flex?: string | number;</span><br><span class="line">+   offset?: number;</span><br><span class="line">+   order?: number;</span><br><span class="line">+   pull?: number;</span><br><span class="line">+   push?: number;</span><br><span class="line">+   span?: number;</span><br><span class="line">+   xs?: ColCSSProps;</span><br><span class="line">+   sm?: ColCSSProps;</span><br><span class="line">+   md?: ColCSSProps;</span><br><span class="line">+   lg?: ColCSSProps;</span><br><span class="line">+   xl?: ColCSSProps;</span><br><span class="line">+   xxl?: ColCSSProps;</span><br><span class="line">+ &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Step-4-编写-Col-组件的基础骨架"><a href="#Step-4-编写-Col-组件的基础骨架" class="headerlink" title="Step-4 编写 Col 组件的基础骨架"></a>Step-4 编写 Col 组件的基础骨架</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Col.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123;ReactNode, CSSProperties &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ClassNames <span class="keyword">from</span> <span class="string">'classnames'</span>;</span><br><span class="line">interface ColCSSProps &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> interface ColProps &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ type mediaScreen = <span class="string">'xs'</span> | <span class="string">'sm'</span> | <span class="string">'md'</span> | <span class="string">'lg'</span> | <span class="string">'xl'</span> | <span class="string">'xxl'</span>;</span><br><span class="line"></span><br><span class="line">+ <span class="function"><span class="keyword">function</span> <span class="title">sc</span>(<span class="params">size: mediaScreen, value: ColCSSProps</span>): <span class="title">Array</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">+   <span class="keyword">const</span> t: <span class="built_in">Array</span>&lt;string&gt; = [];</span><br><span class="line">+   <span class="built_in">Object</span>.keys(value).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">+     t.push(<span class="string">`azir-col-<span class="subst">$&#123;size&#125;</span>-<span class="subst">$&#123;key&#125;</span>-<span class="subst">$&#123;value[key]&#125;</span>`</span>);</span><br><span class="line">+   &#125;);</span><br><span class="line">+   <span class="keyword">return</span> t;</span><br><span class="line">+ &#125;</span><br><span class="line"></span><br><span class="line">+ <span class="keyword">const</span> Col: FC&lt;ColProps&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">+   <span class="keyword">const</span> &#123;</span><br><span class="line">+    className,</span><br><span class="line">+    style = &#123;&#125;,</span><br><span class="line">+    span,</span><br><span class="line">+    offset,</span><br><span class="line">+    children,</span><br><span class="line">+    pull,</span><br><span class="line">+    push,</span><br><span class="line">+    order,</span><br><span class="line">+    xs,</span><br><span class="line">+    sm,</span><br><span class="line">+    md,</span><br><span class="line">+    lg,</span><br><span class="line">+    xl,</span><br><span class="line">+    xxl</span><br><span class="line">+   &#125; = props;</span><br><span class="line">+</span><br><span class="line">+   <span class="keyword">const</span> [classes, setClasses] = useState&lt;string&gt;(</span><br><span class="line">+    ClassNames(<span class="string">'azir-col'</span>, className, &#123;</span><br><span class="line">+      [<span class="string">`azir-col-span-<span class="subst">$&#123;span&#125;</span>`</span>]: span,</span><br><span class="line">+      [<span class="string">`azir-col-offset-<span class="subst">$&#123;offset&#125;</span>`</span>]: offset,</span><br><span class="line">+      [<span class="string">`azir-col-pull-<span class="subst">$&#123;pull&#125;</span>`</span>]: pull,</span><br><span class="line">+      [<span class="string">`azir-col-push-<span class="subst">$&#123;push&#125;</span>`</span>]: push,</span><br><span class="line">+      [<span class="string">`azir-col-order-<span class="subst">$&#123;order&#125;</span>`</span>]: order</span><br><span class="line">+    &#125;)</span><br><span class="line">+   );</span><br><span class="line">+</span><br><span class="line">+   <span class="comment">// 响应式 xs,sm,md,lg,xl,xxl</span></span><br><span class="line">+   useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">+     xs &amp;&amp; setClasses(<span class="function"><span class="params">classes</span> =&gt;</span> ClassNames(classes, sc(<span class="string">'xs'</span>, xs)));</span><br><span class="line">+     sm &amp;&amp; setClasses(<span class="function"><span class="params">classes</span> =&gt;</span> ClassNames(classes, sc(<span class="string">'sm'</span>, sm)));</span><br><span class="line">+     md &amp;&amp; setClasses(<span class="function"><span class="params">classes</span> =&gt;</span> ClassNames(classes, sc(<span class="string">'md'</span>, md)));</span><br><span class="line">+     lg &amp;&amp; setClasses(<span class="function"><span class="params">classes</span> =&gt;</span> ClassNames(classes, sc(<span class="string">'lg'</span>, lg)));</span><br><span class="line">+     xl &amp;&amp; setClasses(<span class="function"><span class="params">classes</span> =&gt;</span> ClassNames(classes, sc(<span class="string">'xl'</span>, xl)));</span><br><span class="line">+     xxl &amp;&amp; setClasses(<span class="function"><span class="params">classes</span> =&gt;</span> ClassNames(classes, sc(<span class="string">'xxl'</span>, xxl)));</span><br><span class="line">+   &#125;, [xs, sm, md, lg, xl, xxl]);</span><br><span class="line">+</span><br><span class="line">+   <span class="keyword">return</span> (</span><br><span class="line">+     <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">+       &#123;children&#125;</span></span><br><span class="line"><span class="xml">+     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">+   );</span><br><span class="line">+ &#125;;</span><br><span class="line">+ Col.defaultProps = &#123;</span><br><span class="line">+   offset: <span class="number">0</span>,</span><br><span class="line">+   pull: <span class="number">0</span>,</span><br><span class="line">+   push: <span class="number">0</span>,</span><br><span class="line">+   span: <span class="number">24</span></span><br><span class="line">+ &#125;;</span><br><span class="line">+ Col.displayName = <span class="string">'Col'</span>;</span><br><span class="line">+</span><br><span class="line">+ <span class="keyword">export</span> <span class="keyword">default</span> Col;</span><br></pre></td></tr></table></figure>

<p>在这里 <code>TypeScript</code> 编译器抛出了警告。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Element implicitly has an <span class="string">'any'</span> <span class="built_in">type</span> because expression of <span class="built_in">type</span> <span class="string">'string'</span> can<span class="string">'t be used to index type '</span>ColCSSProps<span class="string">'.</span></span><br><span class="line"><span class="string">  No index signature with a parameter of type '</span>string<span class="string">' was found on type '</span>ColCSSProps<span class="string">'.  TS7053</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    71 |       const t: Array&lt;string&gt; = [];</span></span><br><span class="line"><span class="string">    72 |       Object.keys(value).forEach(key =&gt; &#123;</span></span><br><span class="line"><span class="string">  &gt; 73 |         t.push(`azir-col-$&#123;size&#125;-$&#123;key&#125;-$&#123;value[key]&#125;`);</span></span><br><span class="line"><span class="string">       |                                           ^</span></span><br><span class="line"><span class="string">    74 |       &#125;);</span></span><br><span class="line"><span class="string">    75 |       return t;</span></span><br><span class="line"><span class="string">    76 |     &#125;</span></span><br></pre></td></tr></table></figure>

<p>翻译过来就是：元素隐式地具有 <code>any</code> 类型，类型 <code>string</code> 不能用于<code>ColCSSProps</code>的索引类型。那么这个问题该如何结局呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ColCSSProps &#123;</span><br><span class="line">  offset?: number;</span><br><span class="line">  order?: number;</span><br><span class="line">  pull?: number;</span><br><span class="line">  push?: number;</span><br><span class="line">  span?: number;</span><br><span class="line">+  [key: string]: number | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只需要告诉 <code>TypeScript</code> <code>ColCSSProps</code> 的键类型是 <code>string</code> 值类型为 <code>number | undefined</code> 就可以了。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>写到现在，该测试一下代码了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// example.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Row <span class="keyword">from</span> <span class="string">'./row'</span>;</span><br><span class="line"><span class="keyword">import</span> Col <span class="keyword">from</span> <span class="string">'./col'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div data-test=<span class="string">"row-test"</span> style=&#123;&#123; <span class="attr">padding</span>: <span class="string">'20px'</span> &#125;&#125;&gt;</span><br><span class="line">      &lt;Row className=<span class="string">"jd-share"</span>&gt;</span><br><span class="line">        &lt;Col style=&#123;&#123; <span class="attr">background</span>: <span class="string">'red'</span> &#125;&#125; span=&#123;<span class="number">2</span>&#125;&gt;</span><br><span class="line">          <span class="number">123</span></span><br><span class="line">        &lt;<span class="regexp">/Col&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Col style=&#123;&#123; background: 'yellow' &#125;&#125; offset=&#123;2&#125; span=&#123;4&#125;&gt;</span></span><br><span class="line"><span class="regexp">          123</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Col&gt;</span><br><span class="line">        &lt;Col style=&#123;&#123; <span class="attr">background</span>: <span class="string">'blue'</span> &#125;&#125; span=&#123;<span class="number">6</span>&#125;&gt;</span><br><span class="line">          <span class="number">123</span></span><br><span class="line">        &lt;<span class="regexp">/Col&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Row&gt;</span><br><span class="line">      &lt;Row&gt;</span><br><span class="line">        &lt;Col order=&#123;<span class="number">1</span>&#125; span=&#123;<span class="number">8</span>&#125; xs=&#123;&#123; <span class="attr">span</span>: <span class="number">20</span> &#125;&#125; lg=&#123;&#123; <span class="attr">span</span>: <span class="number">11</span>, <span class="attr">offset</span>: <span class="number">1</span> &#125;&#125;&gt;</span><br><span class="line">          &lt;div style=&#123;&#123; <span class="attr">height</span>: <span class="string">'100px'</span>, <span class="attr">backgroundColor</span>: <span class="string">'#3170bb'</span> &#125;&#125;&gt;</span><br><span class="line">            Col1</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Col&gt;</span><br><span class="line">        &lt;Col span=&#123;<span class="number">4</span>&#125; xs=&#123;&#123; <span class="attr">span</span>: <span class="number">4</span> &#125;&#125; lg=&#123;&#123; <span class="attr">span</span>: <span class="number">12</span> &#125;&#125;&gt;</span><br><span class="line">          &lt;div style=&#123;&#123; <span class="attr">height</span>: <span class="string">'80px'</span>, <span class="attr">backgroundColor</span>: <span class="string">'#2170bb'</span> &#125;&#125;&gt;Col2&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Col&gt;</span><br><span class="line">      &lt;<span class="regexp">/Row&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>xs 尺寸屏幕下<br><img src="/images/share-ex-1.png" alt="lg 尺寸屏幕下"><br>lg 尺寸屏幕下<br><img src="/images/share-ex-2.png" alt="xs 尺寸屏幕下"></p>
<p>至此呢，效果还算不错。</p>
<h3 id="Step-5-限制-Row-组件的-Children"><a href="#Step-5-限制-Row-组件的-Children" class="headerlink" title="Step-5 限制 Row 组件的 Children"></a>Step-5 限制 Row 组件的 Children</h3><p>虽然效果还不错，但是 <code>Row</code> 组件的 <code>Children</code> 可以传递任何元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// row.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Row: FC&lt;RowProps&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;classes&#125; style=&#123;style&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure>

<p>这也太随意了吧！如果 <code>Children</code> 中包含了不是 <code>Col</code> 组件的节点的话布局肯定会出问题，我决定在这里限制一下 <code>Row</code> 组件的 <code>Children</code> 类型。</p>
<p>那么该如何去限制呢？这里呢我就要清楚一位大哥了—– <code>React.Children</code></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>经验</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue源码解析-准备开始(Step 1)</title>
    <url>/2020/05/13/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E5%87%86%E5%A4%87%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h1 id="准备开始"><a href="#准备开始" class="headerlink" title="准备开始"></a>准备开始</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZQ==">vue 源码地址<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="源码目录设计"><a href="#源码目录设计" class="headerlink" title="源码目录设计"></a>源码目录设计</h2><p><code>Vue</code> 的主要源码都在 <code>src</code> 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── compiler        # 编译相关</span><br><span class="line">├── core            # 核心代码</span><br><span class="line">├── platforms       # 不同平台的支持（weex、web）</span><br><span class="line">├── server          # 服务端渲染</span><br><span class="line">├── sfc             # 将.vue 文件解析成对象</span><br><span class="line">├── shared          # 共享代码</span><br></pre></td></tr></table></figure>

<h3 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h3><p>该目录包含 <code>Vue.js</code> 编译相关的所有代码。将模版编译成 <code>AST</code> 语法树、优化 <code>AST</code> 、代码生成等。<br>编译可以在运行时做，也可以在构建时做。编译是一件非常消耗性能的操作，所以更推荐 <code>Runtime only</code>，如果使用 <code>Runtime + Compiler</code> 会让你的应用额外增加 10kb 左右。</p>
<h3 id="core"><a href="#core" class="headerlink" title="core"></a>core</h3><p>该目录包含所 <code>Vue</code> 的核心代码，也是 <code>Vue</code> 的灵魂所在。包括内置组件、全局 <code>API</code> 的封装，<code>Vue</code> 实例化、观察者、<code>Virtual DOM</code>、工具函数等等。</p>
<h3 id="platforms"><a href="#platforms" class="headerlink" title="platforms"></a>platforms</h3><p><code>Vue</code> 可以运行在 <code>Web</code> 平台，也可以配合 <code>weex</code> 运行在 <code>Native</code> 平台上，该目录是 <code>Vue</code> 的入口文件，分别打包 <code>Web</code> 平台和 <code>weex</code> 平台的 <code>Vue.js</code> 。</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><code>Vue2.0</code> 支持服务端渲染，该目录下包含了所有与服务端渲染的相关逻辑。</p>
<h3 id="sfc"><a href="#sfc" class="headerlink" title="sfc"></a>sfc</h3><p>我们开发<code>Vue</code>工程时，经常会写<code>.vue</code>的<code>template</code>，然后用<code>webpack</code>来帮助我们打包构建，该目录下的代码会将<code>.vue</code>解析成 js 对象。</p>
<h3 id="shared"><a href="#shared" class="headerlink" title="shared"></a>shared</h3><p>该目录会存放一些 <code>Vue.js</code> 工具方法，这里定义的工具方法都是会被浏览器端的 Vue.js 和服务端的 <code>Vue.js</code> 所共享的。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以看到 <code>Vue</code> 的目录结构是非常清晰的，把功能模块拆分的很细致，这样的设计思想非常值得我们去学习参考的。</p>
<h2 id="Vue-js-源码构建"><a href="#Vue-js-源码构建" class="headerlink" title="Vue.js 源码构建"></a>Vue.js 源码构建</h2><p><code>Vue.js</code> 是基于<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXA=">Rollup<i class="fa fa-external-link-alt"></i></span>构建的,相关配置都在 scripts 目录下。</p>
<h3 id="构建脚本"><a href="#构建脚本" class="headerlink" title="构建脚本"></a>构建脚本</h3><p>取 <code>package.json</code> 中的 <code>scripts</code> 的一部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"node scripts/build.js"</span>,</span><br><span class="line">    <span class="string">"build:ssr"</span>: <span class="string">"npm run build -- web-runtime-cjs,web-server-renderer"</span>,</span><br><span class="line">    <span class="string">"build:weex"</span>: <span class="string">"npm run build -- weex"</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>这三条命令都是用来构建 <code>Vue.js</code> 的，只不过就是环境参数不同。</p>
<h3 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h3><p>接下来看一下<code>scripts/build.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> builds = <span class="built_in">require</span>(<span class="string">'./config'</span>).getAllBuilds();</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter builds via command line arg</span></span><br><span class="line"><span class="keyword">if</span> (process.argv[<span class="number">2</span>]) &#123;</span><br><span class="line">  <span class="keyword">const</span> filters = process.argv[<span class="number">2</span>].split(<span class="string">','</span>);</span><br><span class="line">  builds = builds.filter(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> filters.some(</span><br><span class="line">      f =&gt; b.output.file.indexOf(f) &gt; <span class="number">-1</span> || b._name.indexOf(f) &gt; <span class="number">-1</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// filter out weex builds by default</span></span><br><span class="line">  builds = builds.filter(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b.output.file.indexOf(<span class="string">'weex'</span>) === <span class="number">-1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build(builds);</span><br></pre></td></tr></table></figure>

<p>这段配置很简单，先引入所有配置，再根据命令行参数来筛选出需要的构建配置，从而构建出不通用途的<code>Vue.js</code>，接下来看一下<code>scripts/config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> builds = &#123;</span><br><span class="line">  <span class="comment">// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</span></span><br><span class="line">  <span class="string">'web-runtime-cjs-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.common.dev.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'web-runtime-cjs-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.common.prod.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler CommonJS build (CommonJS)</span></span><br><span class="line">  <span class="string">'web-full-cjs-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.common.dev.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'web-full-cjs-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.common.prod.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime only ES modules build (for bundlers)</span></span><br><span class="line">  <span class="string">'web-runtime-esm'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.esm.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler ES modules build (for bundlers)</span></span><br><span class="line">  <span class="string">'web-full-esm'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.esm.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler ES modules build (for direct import in browser)</span></span><br><span class="line">  <span class="string">'web-full-esm-browser-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.esm.browser.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    transpile: <span class="literal">false</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler ES modules build (for direct import in browser)</span></span><br><span class="line">  <span class="string">'web-full-esm-browser-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.esm.browser.min.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    transpile: <span class="literal">false</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// runtime-only build (Browser)</span></span><br><span class="line">  <span class="string">'web-runtime-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// runtime-only production build (Browser)</span></span><br><span class="line">  <span class="string">'web-runtime-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.min.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler development build (Browser)</span></span><br><span class="line">  <span class="string">'web-full-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler production build  (Browser)</span></span><br><span class="line">  <span class="string">'web-full-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.min.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在这里只列举了一部分的构建配置，还有 <code>server</code> 相关和 <code>weex</code> 相关的就暂不列举了。<br>该配置遵循 <code>Rollup</code> 的构建规则，<code>entry</code> 是 <code>js</code> 的入口文件；<code>dest</code>是<code>js</code>的目地址；<code>format</code>表示构建的格式，<code>cjs</code> 表示构建出的代码遵循 <code>CommonJS</code> 规范、<code>es</code> 表示构建出来的文件遵循 <code>ES Module</code> 规、 <code>umd</code> 表示构建出来的文件遵循 <code>UMD</code> 规范。</p>
<p>我们以<code>web-runtime-cjs-prod</code>为例，它的 <code>entry</code> 是 <code>resolve(&#39;web/entry-runtime.js&#39;)</code>，先来看一下<code>resolve</code>函数是如何来定义的。找到它所在的文件<code>scripts/config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aliases = <span class="built_in">require</span>(<span class="string">'./alias'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> base = p.split(<span class="string">'/'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (aliases[base]) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(aliases[base], p.slice(base.length + <span class="number">1</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(__dirname, <span class="string">'../'</span>, p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>那这个 aliases 又是什么呢？我们来看一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">p</span> =&gt;</span> path.resolve(__dirname, <span class="string">'../'</span>, p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  vue: resolve(<span class="string">'src/platforms/web/entry-runtime-with-compiler'</span>),</span><br><span class="line">  compiler: resolve(<span class="string">'src/compiler'</span>),</span><br><span class="line">  core: resolve(<span class="string">'src/core'</span>),</span><br><span class="line">  shared: resolve(<span class="string">'src/shared'</span>),</span><br><span class="line">  web: resolve(<span class="string">'src/platforms/web'</span>),</span><br><span class="line">  weex: resolve(<span class="string">'src/platforms/weex'</span>),</span><br><span class="line">  server: resolve(<span class="string">'src/server'</span>),</span><br><span class="line">  sfc: resolve(<span class="string">'src/sfc'</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>分析以上代码可以看出 <code>resolve</code> 函数并不复杂，以 <code>web-runtime-cjs-prod</code> 的配置为例，<code>entry</code> 向 <code>resolve</code>函数中传入了<code>web/entry-runtime.js</code>，<code>resolve</code> 函数先用 <code>/</code> 分割出 <code>base = &#39;web&#39;</code>，再配合 <code>aliases</code> 得到最终的绝对路径<code>/../.../src/platforms/web/entry-runtime.js</code>，这样就找到了它的入口文件，同理，它经过 <code>Rollup</code> 打包构建之后，最终会在 <code>dist</code> 目录下生成 <code>vue.runtime.common.prod.js</code></p>
<h3 id="Runtime-Only-VS-Runtime-Compiler"><a href="#Runtime-Only-VS-Runtime-Compiler" class="headerlink" title="Runtime Only VS Runtime + Compiler"></a>Runtime Only VS Runtime + Compiler</h3><p>通常我们利用 <code>@vue/cli</code> 去初始化我们的 <code>Vue.js</code> 项目的时候会询问我们用 <code>Runtime Only</code> 版本的还是 <code>Runtime + Compiler</code> 版本。下面我们来对比这两个版本。那么他们究竟有什么区别呢？</p>
<ul>
<li>Runtime Only<br>我们在使用<code>Runtime Only</code> 版本的 <code>Vue.js</code> 的时候，通常需要借助如 <code>webpack</code> 的 <code>vue-loader</code> 工具把 <code>.vue</code> 文件编译成 <code>JavaScript</code>，因为是在编译阶段做的，所以它只包含运行时的 <code>Vue.js</code> 代码，因此代码体积也会更轻量。</li>
<li>Runtime + Compiler<br>如果我们没有预编译，那么需要在使用 <code>Vue</code> 的是时候传入 <code>template</code> 字符串，并在客户端进行编译模板，所以 <code>Runtime + Compiler</code> 版本的 <code>Vue.js</code> 会多出 <code>10kb</code> 左右。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要编译器的版本</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123; hi &#125;&#125;&lt;/div&gt;'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不需要编译器的版本</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="string">'Hello World!'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在 <code>Vue2.0</code> 中，是通过 <code>render</code> 函数来渲染的，如果写 <code>template</code> 就需要编译的一个过程，所以更加损耗性能，因此更建议大家使用<code>Runtime Only</code> 版本。</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>这一小节我们了解到了 <code>Vue</code> 的构建过程，也了解到了 <code>Runtime Only</code> 和 <code>Runtime + Compiler</code> 的区别，虽然我们开发中会常用到 <code>Runtime Only</code> 版本，但是了搞清楚编译的过程，接下会还是回去讲解 <code>Runtime + Compiler</code> 版本的实现。</p>
<h2 id="分析入口"><a href="#分析入口" class="headerlink" title="分析入口"></a>分析入口</h2><p>更具上一小节的分析，我们可以很轻松找到 <code>Web</code> 平台下的 <code>Runtime + Compiler</code> 版本的入口文件 <code>src/platforms/web/entry-runtime-with-compiler.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'core/config'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; warn, cached &#125; <span class="keyword">from</span> <span class="string">'core/util/index'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mark, measure &#125; <span class="keyword">from</span> <span class="string">'core/util/perf'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./runtime/index'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; query &#125; <span class="keyword">from</span> <span class="string">'./util/index'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; compileToFunctions &#125; <span class="keyword">from</span> <span class="string">'./compiler/index'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  shouldDecodeNewlines,</span><br><span class="line">  shouldDecodeNewlinesForHref,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./util/compat'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> idToTemplate = cached(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> el = query(id);</span><br><span class="line">  <span class="keyword">return</span> el &amp;&amp; el.innerHTML;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount;</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; query(el);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span></span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">this</span>.$options;</span><br><span class="line">  <span class="comment">// resolve template/el and convert to render function</span></span><br><span class="line">  <span class="keyword">if</span> (!options.render) &#123;</span><br><span class="line">    <span class="keyword">let</span> template = options.template;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</span><br><span class="line">          template = idToTemplate(template);</span><br><span class="line">          <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">          <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !template) &#123;</span><br><span class="line">            warn(</span><br><span class="line">              <span class="string">`Template element not found or is empty: <span class="subst">$&#123;options.template&#125;</span>`</span>,</span><br><span class="line">              <span class="keyword">this</span></span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</span><br><span class="line">        template = template.innerHTML;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          warn(<span class="string">'invalid template option:'</span> + template, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      template = getOuterHTML(el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">        mark(<span class="string">'compile'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(</span><br><span class="line">        template,</span><br><span class="line">        &#123;</span><br><span class="line">          outputSourceRange: process.env.NODE_ENV !== <span class="string">'production'</span>,</span><br><span class="line">          shouldDecodeNewlines,</span><br><span class="line">          shouldDecodeNewlinesForHref,</span><br><span class="line">          delimiters: options.delimiters,</span><br><span class="line">          comments: options.comments,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">this</span></span><br><span class="line">      );</span><br><span class="line">      options.render = render;</span><br><span class="line">      options.staticRenderFns = staticRenderFns;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">        mark(<span class="string">'compile end'</span>);</span><br><span class="line">        measure(<span class="string">`vue <span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span> compile`</span>, <span class="string">'compile'</span>, <span class="string">'compile end'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get outerHTML of elements, taking care</span></span><br><span class="line"><span class="comment"> * of SVG elements in IE as well.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOuterHTML</span>(<span class="params">el: Element</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (el.outerHTML) &#123;</span><br><span class="line">    <span class="keyword">return</span> el.outerHTML;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> container = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    container.appendChild(el.cloneNode(<span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">return</span> container.innerHTML;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.compile = compileToFunctions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br></pre></td></tr></table></figure>

<p>可以看到在这个入口中在 Vue 原型上挂载了 $mount 方法，这个方法的具体用途后续再讲解。我们可以看到 <code>Vue</code> 的来源 <code>import Vue from &#39;./runtime/index&#39;</code></p>
<h3 id="Vue-的入口"><a href="#Vue-的入口" class="headerlink" title="Vue 的入口"></a>Vue 的入口</h3><p>我们跟随代码来找到 <code>Vue</code> 的入口 <code>src/platforms/web/runtime/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'core/index'</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'core/config'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; extend, noop &#125; <span class="keyword">from</span> <span class="string">'shared/util'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mountComponent &#125; <span class="keyword">from</span> <span class="string">'core/instance/lifecycle'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; devtools, inBrowser &#125; <span class="keyword">from</span> <span class="string">'core/util/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  query,</span><br><span class="line">  mustUseProp,</span><br><span class="line">  isReservedTag,</span><br><span class="line">  isReservedAttr,</span><br><span class="line">  getTagNamespace,</span><br><span class="line">  isUnknownElement,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'web/util/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; patch &#125; <span class="keyword">from</span> <span class="string">'./patch'</span>;</span><br><span class="line"><span class="keyword">import</span> platformDirectives <span class="keyword">from</span> <span class="string">'./directives/index'</span>;</span><br><span class="line"><span class="keyword">import</span> platformComponents <span class="keyword">from</span> <span class="string">'./components/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// install platform specific utils</span></span><br><span class="line">Vue.config.mustUseProp = mustUseProp;</span><br><span class="line">Vue.config.isReservedTag = isReservedTag;</span><br><span class="line">Vue.config.isReservedAttr = isReservedAttr;</span><br><span class="line">Vue.config.getTagNamespace = getTagNamespace;</span><br><span class="line">Vue.config.isUnknownElement = isUnknownElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// install platform runtime directives &amp; components</span></span><br><span class="line">extend(Vue.options.directives, platformDirectives);</span><br><span class="line">extend(Vue.options.components, platformComponents);</span><br><span class="line"></span><br><span class="line"><span class="comment">// install platform patch function</span></span><br><span class="line">Vue.prototype.__patch__ = inBrowser ? patch : noop;</span><br><span class="line"></span><br><span class="line"><span class="comment">// public mount method</span></span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">return</span> mountComponent(<span class="keyword">this</span>, el, hydrating);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br></pre></td></tr></table></figure>

<p>这个文件中又对 <code>Vue</code> 增加了一些配置，我们继续来追溯 Vue 的源头 <code>import Vue from &#39;core/index&#39;</code>，看一下 <code>src/core/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./instance/index'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initGlobalAPI &#125; <span class="keyword">from</span> <span class="string">'./global-api/index'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isServerRendering &#125; <span class="keyword">from</span> <span class="string">'core/util/env'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FunctionalRenderContext &#125; <span class="keyword">from</span> <span class="string">'core/vdom/create-functional-component'</span>;</span><br><span class="line"></span><br><span class="line">initGlobalAPI(Vue);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$isServer'</span>, &#123;</span><br><span class="line">  <span class="keyword">get</span>: isServerRendering,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Object.defineProperty(Vue.prototype, '$ssrContext', &#123;</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$vnode &amp;&amp; <span class="keyword">this</span>.$vnode.ssrContext;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// expose FunctionalRenderContext for ssr runtime helper installation</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue, <span class="string">'FunctionalRenderContext'</span>, &#123;</span><br><span class="line">  value: FunctionalRenderContext,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.version = <span class="string">'__VERSION__'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br></pre></td></tr></table></figure>

<p>可以看到，这里又在 Vue 的原型上挂载了一些属性，这里有两处关键的代码 <code>import Vue from &#39;./instance/index&#39;</code>和 <code>initGlobalAPI(Vue)</code>，我们一一来看</p>
<h3 id="Vue-的定义"><a href="#Vue-的定义" class="headerlink" title="Vue 的定义"></a>Vue 的定义</h3><h4 id="src-core-instance-index-js"><a href="#src-core-instance-index-js" class="headerlink" title="src/core/instance/index.js"></a><code>src/core/instance/index.js</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">'./init'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; stateMixin &#125; <span class="keyword">from</span> <span class="string">'./state'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; renderMixin &#125; <span class="keyword">from</span> <span class="string">'./render'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; eventsMixin &#125; <span class="keyword">from</span> <span class="string">'./events'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; lifecycleMixin &#125; <span class="keyword">from</span> <span class="string">'./lifecycle'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; warn &#125; <span class="keyword">from</span> <span class="string">'../util/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue);</span><br><span class="line">stateMixin(Vue);</span><br><span class="line">eventsMixin(Vue);</span><br><span class="line">lifecycleMixin(Vue);</span><br><span class="line">renderMixin(Vue);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br></pre></td></tr></table></figure>

<p>通过不懈的努力，可算找到了 <code>Vue</code> 的庐山真面目，<code>Vue</code> 通过 <code>Mixin</code> 混入的的方式来给 <code>Vue</code> 的原型扩展功能。<code>Vue</code> 按功能把这些扩展分散到多个模块中去实现，而不是统一在一个模块里实现，这也是为什么 <code>Vue</code> 不采用 <code>Class</code> 而采用 <code>Function</code> 来实现的原因。这种设计模式值得我们去学习。</p>
<h4 id="initGlobalAPI-Vue"><a href="#initGlobalAPI-Vue" class="headerlink" title="initGlobalAPI(Vue)"></a><code>initGlobalAPI(Vue)</code></h4><p>我们找到 <code>initGlobalAPI</code> 定义的文件 <code>src/core/global-api/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'../config'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initUse &#125; <span class="keyword">from</span> <span class="string">'./use'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">'./mixin'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initExtend &#125; <span class="keyword">from</span> <span class="string">'./extend'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initAssetRegisters &#125; <span class="keyword">from</span> <span class="string">'./assets'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">set</span>, del &#125; from '../observer/index';</span><br><span class="line">import &#123; ASSET_TYPES &#125; <span class="keyword">from</span> <span class="string">'shared/constants'</span>;</span><br><span class="line"><span class="keyword">import</span> builtInComponents <span class="keyword">from</span> <span class="string">'../components/index'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">'core/observer/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  warn,</span><br><span class="line">  extend,</span><br><span class="line">  nextTick,</span><br><span class="line">  mergeOptions,</span><br><span class="line">  defineReactive,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'../util/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initGlobalAPI</span>(<span class="params">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// config</span></span><br><span class="line">  <span class="keyword">const</span> configDef = &#123;&#125;;</span><br><span class="line">  configDef.get = <span class="function"><span class="params">()</span> =&gt;</span> config;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    configDef.set = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Do not replace the Vue.config object, set individual fields instead.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue, <span class="string">'config'</span>, configDef);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// exposed util methods.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> these are not considered part of the public API - avoid relying on</span></span><br><span class="line">  <span class="comment">// them unless you are aware of the risk.</span></span><br><span class="line">  Vue.util = &#123;</span><br><span class="line">    warn,</span><br><span class="line">    extend,</span><br><span class="line">    mergeOptions,</span><br><span class="line">    defineReactive,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Vue.set = <span class="keyword">set</span>;</span><br><span class="line">  Vue.delete = del;</span><br><span class="line">  Vue.nextTick = nextTick;</span><br><span class="line"></span><br><span class="line">  // 2.6 explicit observable API</span><br><span class="line">  Vue.observable = &lt;T&gt;(obj: T): T =&gt; &#123;</span><br><span class="line">    observe(obj);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Vue.options = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  ASSET_TYPES.forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">    Vue.options[type + <span class="string">'s'</span>] = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// this is used to identify the "base" constructor to extend all plain-object</span></span><br><span class="line">  <span class="comment">// components with in Weex's multi-instance scenarios.</span></span><br><span class="line">  Vue.options._base = Vue;</span><br><span class="line"></span><br><span class="line">  extend(Vue.options.components, builtInComponents);</span><br><span class="line"></span><br><span class="line">  initUse(Vue);</span><br><span class="line">  initMixin(Vue);</span><br><span class="line">  initExtend(Vue);</span><br><span class="line">  initAssetRegisters(Vue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Vue 在初始化的过程中不仅仅会在原型上扩展很多方法，也会在 <code>Vue</code> 对象本身上扩展一些全局静态方法。要注意的是，<code>Vue.util</code> 暴露的方法最好不要使用，它可能经常会发生变化，是不稳定的。</p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>到这里，<code>Vue</code> 初始化的大概步骤基本了解了，<code>Vue</code> 本质就是一个用 <code>Function</code> 实现的一个类，并且在原型和对象本身上扩展各种方法和属性。</p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue源码解析</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>源码解析</tag>
      </tags>
  </entry>
  <entry>
    <title>React源码解析-基础(Step 1)</title>
    <url>/2020/05/13/React%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>React</category>
        <category>React源码解析</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>源码解析</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue源码解析-数据驱动(Step 2)</title>
    <url>/2020/05/13/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h1><p><code>Vue</code> 的核心思想就是<strong>数据驱动视图</strong>，它相比我们传统的前端开发，减少了大量的 <code>DOM</code> 操作，大大简化了代码量，提高了代码的可维护性。特别是当交互复杂的时候，只关心数据的修改会让代码的逻辑变的非常清晰，因为 <code>DOM</code> 变成了数据的映射，我们所有的逻辑都是对数据的修改，而不用碰触 <code>DOM</code>，这样的代码非常利于维护。</p>
<h2 id="new-Vue-的过程"><a href="#new-Vue-的过程" class="headerlink" title="new Vue 的过程"></a>new Vue 的过程</h2><p>根据上一节的分析，我们找到了 <code>Vue</code> 的入口文件，也知道了 <code>Vue</code> 是一个类，只不过用 <code>Function</code> 来实现。那么我们来看一些 <code>new Vue</code> 的时候做了什么。打开 <code>src/core/instance/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>new Vue</code> 的时候值执行了 <code>this._init</code> 方法，该方法定义在 <code>src/core/instance/init.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// a uid</span></span><br><span class="line">  vm._uid = uid++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> startTag, endTag;</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">    startTag = <span class="string">`vue-perf-start:<span class="subst">$&#123;vm._uid&#125;</span>`</span>;</span><br><span class="line">    endTag = <span class="string">`vue-perf-end:<span class="subst">$&#123;vm._uid&#125;</span>`</span>;</span><br><span class="line">    mark(startTag);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// a flag to avoid this being observed</span></span><br><span class="line">  vm._isVue = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// merge options</span></span><br><span class="line">  <span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">    <span class="comment">// optimize internal component instantiation</span></span><br><span class="line">    <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class="line">    <span class="comment">// internal component options needs special treatment.</span></span><br><span class="line">    initInternalComponent(vm, options);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vm.$options = mergeOptions(</span><br><span class="line">      resolveConstructorOptions(vm.constructor),</span><br><span class="line">      options || &#123;&#125;,</span><br><span class="line">      vm</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    initProxy(vm);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vm._renderProxy = vm;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// expose real self</span></span><br><span class="line">  vm._self = vm;</span><br><span class="line">  initLifecycle(vm); <span class="comment">// 初始化生命周期</span></span><br><span class="line">  initEvents(vm); <span class="comment">// 初始化事件处理中心</span></span><br><span class="line">  initRender(vm); <span class="comment">// 初始化渲染</span></span><br><span class="line">  callHook(vm, <span class="string">'beforeCreate'</span>); <span class="comment">// 回调 beforeCreate</span></span><br><span class="line">  initInjections(vm); <span class="comment">// resolve injections before data/props</span></span><br><span class="line">  initState(vm); <span class="comment">// 初始化 data、props、computed、watcher 等等</span></span><br><span class="line">  initProvide(vm); <span class="comment">// resolve provide after data/props</span></span><br><span class="line">  callHook(vm, <span class="string">'created'</span>); <span class="comment">// 回调 created</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">    vm._name = formatComponentName(vm, <span class="literal">false</span>);</span><br><span class="line">    mark(endTag);</span><br><span class="line">    measure(<span class="string">`vue <span class="subst">$&#123;vm._name&#125;</span> init`</span>, startTag, endTag);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">    vm.$mount(vm.$options.el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们可以看到 <code>Vue</code> 初始化主要做了合并配置、初始化生命周期、初始化事件中心、初始化渲染<br>初始化 <code>data</code>、<code>props</code>、<code>computed</code>、<code>watcher</code> 等等，然后在最后执行 <code>$mount</code> 方法挂载。在这里顺便提一嘴 <code>initState</code> 方法，<br>这个方法定义在 <code>src/core/instance/state.js</code>。为什么提一下这个函数呢，因为我们在使用 Vue 的时候会经常碰到如下的场景：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'hello world'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我们在 <code>mouted</code> 生命周期中调用了 <code>this.msg</code>，不知读者们有没有考虑过为什么就可以直接调用了 <code>msg</code> 了呢？还是想当然地认为这是应该的？其实在这里 <code>Vue</code> 做了一个很有意思的操作，我们来看一下 <code>initState</code> 方法 <code>src/core/instance/state.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">target: Object, sourceKey: string, key: string</span>) </span>&#123;</span><br><span class="line">  sharedPropertyDefinition.get = <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[sourceKey][key];</span><br><span class="line">  &#125;;</span><br><span class="line">  sharedPropertyDefinition.set = <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[sourceKey][key] = val;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, sharedPropertyDefinition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span>(<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._watchers = [];</span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options;</span><br><span class="line">  <span class="keyword">if</span> (opts.props) initProps(vm, opts.props);</span><br><span class="line">  <span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods);</span><br><span class="line">  <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">    initData(vm);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    observe((vm._data = &#123;&#125;), <span class="literal">true</span> <span class="comment">/* asRootData */</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed);</span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.$options.data;</span><br><span class="line">  data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span> ? getData(data, vm) : data || &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(data)) &#123;</span><br><span class="line">    data = &#123;&#125;;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'data functions should return an object:\n'</span> +</span><br><span class="line">          <span class="string">'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function'</span>,</span><br><span class="line">        vm</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// proxy data on instance</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data);</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props;</span><br><span class="line">  <span class="keyword">const</span> methods = vm.$options.methods;</span><br><span class="line">  <span class="keyword">let</span> i = keys.length;</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i];</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (methods &amp;&amp; hasOwn(methods, key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`Method "<span class="subst">$&#123;key&#125;</span>" has already been defined as a data property.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`The data property "<span class="subst">$&#123;key&#125;</span>" is already declared as a prop. `</span> +</span><br><span class="line">            <span class="string">`Use prop default value instead.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isReserved(key)) &#123;</span><br><span class="line">      proxy(vm, <span class="string">`_data`</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// observe data</span></span><br><span class="line">  observe(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>在 initState 中调用了 initData 方法，在 initData 方法中又调用了 proxy 方法，我们看一下 proxy 的实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">target: Object, sourceKey: string, key: string</span>) </span>&#123;</span><br><span class="line">  sharedPropertyDefinition.get = <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[sourceKey][key];</span><br><span class="line">  &#125;;</span><br><span class="line">  sharedPropertyDefinition.set = <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[sourceKey][key] = val;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, sharedPropertyDefinition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实就是通过 <code>Object.defineProperty</code> 方法，将 <code>data</code>、<code>props</code> 等属性代理到了 vm 的实例上，是不是很巧妙？</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>Vue</code> 的初始化逻辑写的非常清楚，把不同的功能逻辑拆成一些单独的函数执行，让主线逻辑一目了然，这样的编程思想是非常值得借鉴和学习的。这一章我们主要来分析模板和数据如何渲染成最终的 <code>DOM</code>，<br>在初始化函数 <code>this._init</code> 的最后使用了 <code>vm.$mount</code> 方法来挂载 <code>vm</code>实例，接下在我们就来分析一下 <code>Vue</code> 的挂载过程。</p>
<h2 id="Vue-实例的挂载"><a href="#Vue-实例的挂载" class="headerlink" title="Vue 实例的挂载"></a>Vue 实例的挂载</h2><p>上一节中我们提到了 <code>$mount</code> 方法，这个方法在多处都有定义，这是因为根据不同的平台，挂载的方式不同。为了搞清楚原理，我们重点分析 <code>Runtime + Complier</code> 版本的 <code>$mount</code> 方法。它定义在<code>src/platform/web/entry-runtime-with-compiler.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount;</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; query(el);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span></span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">this</span>.$options;</span><br><span class="line">  <span class="comment">// resolve template/el and convert to render function</span></span><br><span class="line">  <span class="keyword">if</span> (!options.render) &#123;</span><br><span class="line">    <span class="keyword">let</span> template = options.template;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</span><br><span class="line">          template = idToTemplate(template);</span><br><span class="line">          <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">          <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !template) &#123;</span><br><span class="line">            warn(</span><br><span class="line">              <span class="string">`Template element not found or is empty: <span class="subst">$&#123;options.template&#125;</span>`</span>,</span><br><span class="line">              <span class="keyword">this</span></span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</span><br><span class="line">        template = template.innerHTML;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          warn(<span class="string">'invalid template option:'</span> + template, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      template = getOuterHTML(el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">        mark(<span class="string">'compile'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(</span><br><span class="line">        template,</span><br><span class="line">        &#123;</span><br><span class="line">          outputSourceRange: process.env.NODE_ENV !== <span class="string">'production'</span>,</span><br><span class="line">          shouldDecodeNewlines,</span><br><span class="line">          shouldDecodeNewlinesForHref,</span><br><span class="line">          delimiters: options.delimiters,</span><br><span class="line">          comments: options.comments,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">this</span></span><br><span class="line">      );</span><br><span class="line">      options.render = render;</span><br><span class="line">      options.staticRenderFns = staticRenderFns;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">        mark(<span class="string">'compile end'</span>);</span><br><span class="line">        measure(<span class="string">`vue <span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span> compile`</span>, <span class="string">'compile'</span>, <span class="string">'compile end'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这段代码中，首先使用 <code>mount</code> 变量缓存了 <code>Vue</code> 原型上的 <code>$mount</code> 方法，然后重新定义。先看一下这段代码，首先判断了 <code>el</code> 属性的合法性，<code>Vue</code> 是不可以挂载到 <code>body</code>、<code>html</code> 标签上去的，然后就是比较重要的逻辑，如果没有传入 <code>render</code> 方法，<code>Vue</code> 就会把 <code>el</code> 或者 <code>template</code> 转换成 <code>render</code> 函数，无论我们采用 <code>.vue</code> 的开发模式还是 <code>el</code> 或 <code>template</code> 的写法，最终都会被转换成 <code>render</code> 函数。这个转化成 <code>render</code> 函数的过程就是 <code>Vue</code> 的一个编译过程，这个过程是在 <code>compileToFunctions</code> 函数中去完成的。最后呢，就会去调用 <code>mount</code> 方法，也就是之前缓存过的 <code>$mount</code> 方法，那么我们就来看一下这个方法的实现，这个方法定义在<br><code>src/platform/web/runtime/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public mount method</span></span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">return</span> mountComponent(<span class="keyword">this</span>, el, hydrating);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>$mount</code> 方法支持传入 2 个参数，el 表示挂载的元素，可以是字符串，也可以是 DOM 对象，如果是字符串在浏览器环境下会调用 <code>query</code> 方法转换成 DOM 对象的。第二个参数是和服务端渲染相关，在浏览器环境下我们不需要传第二个参数。然后又会调用<br><code>mountComponent</code> 方法，这个方法定义在 <code>src/core/instance/lifecycle.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  el: ?Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  vm.$el = el;</span><br><span class="line">  <span class="keyword">if</span> (!vm.$options.render) &#123;</span><br><span class="line">    vm.$options.render = createEmptyVNode;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        (vm.$options.template &amp;&amp; vm.$options.template.charAt(<span class="number">0</span>) !== <span class="string">'#'</span>) ||</span><br><span class="line">        vm.$options.el ||</span><br><span class="line">        el</span><br><span class="line">      ) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'You are using the runtime-only build of Vue where the template '</span> +</span><br><span class="line">            <span class="string">'compiler is not available. Either pre-compile the templates into '</span> +</span><br><span class="line">            <span class="string">'render functions, or use the compiler-included build.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'Failed to mount component: template or render function not defined.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, <span class="string">'beforeMount'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> updateComponent;</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">    updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> name = vm._name;</span><br><span class="line">      <span class="keyword">const</span> id = vm._uid;</span><br><span class="line">      <span class="keyword">const</span> startTag = <span class="string">`vue-perf-start:<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">const</span> endTag = <span class="string">`vue-perf-end:<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">      mark(startTag);</span><br><span class="line">      <span class="keyword">const</span> vnode = vm._render();</span><br><span class="line">      mark(endTag);</span><br><span class="line">      measure(<span class="string">`vue <span class="subst">$&#123;name&#125;</span> render`</span>, startTag, endTag);</span><br><span class="line"></span><br><span class="line">      mark(startTag);</span><br><span class="line">      vm._update(vnode, hydrating);</span><br><span class="line">      mark(endTag);</span><br><span class="line">      measure(<span class="string">`vue <span class="subst">$&#123;name&#125;</span> patch`</span>, startTag, endTag);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      vm._update(vm._render(), hydrating);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we set this to vm._watcher inside the watcher's constructor</span></span><br><span class="line">  <span class="comment">// since the watcher's initial patch may call $forceUpdate (e.g. inside child</span></span><br><span class="line">  <span class="comment">// component's mounted hook), which relies on vm._watcher being already defined</span></span><br><span class="line">  <span class="keyword">new</span> Watcher(</span><br><span class="line">    vm,</span><br><span class="line">    updateComponent,</span><br><span class="line">    noop,</span><br><span class="line">    &#123;</span><br><span class="line">      before() &#123;</span><br><span class="line">        <span class="keyword">if</span> (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;</span><br><span class="line">          callHook(vm, <span class="string">'beforeUpdate'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span></span><br><span class="line">  );</span><br><span class="line">  hydrating = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// manually mounted instance, call mounted on self</span></span><br><span class="line">  <span class="comment">// mounted is called for render-created child components in its inserted hook</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode == <span class="literal">null</span>) &#123;</span><br><span class="line">    vm._isMounted = <span class="literal">true</span>;</span><br><span class="line">    callHook(vm, <span class="string">'mounted'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>mountComponent</code> 核心就是先实例化一个渲染 <code>Watcher</code>，在这个 <code>Watcher</code> 对象中传入 <code>updateComponent</code> 回调。在 <code>updateComponent</code> 方法中首先调用 <code>vm._render</code> 来生成一个 <code>VNode</code>，然后再调用 <code>vm._update</code> 更新 <code>DOM</code> 。</p>
<p><code>Watcher</code> 在这里起到两个作用，一是初始化的时候会执行回调函数，二是当 vm 实例中的监测的数据发生变化的时候执行回调函数。</p>
<p>函数最后判断为根节点的时候设置 <code>vm._isMounted</code> 为 true， 表示这个实例已经挂载了，同时执行 <code>mounted</code> 钩子函数。 这里注意 <code>vm.$vnode</code> 表示 <code>Vue</code> 实例的父 <code>VNode</code>，所以它为 Null 则表示当前是根 Vue 的实例。</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>通过这一节的分析，我们可以认识到，<code>Vue</code> 的两个核心方法：<code>vm._update</code> 、<code>vm._render</code></p>
<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p>在 <code>Vue</code> 的入口文件 <code>src/core/intance/index.js</code> 中，使用 <code>renderMixin</code> 方法来混入了 <code>render</code> 方法，定义在<br><code>src/core/intance/render.js</code>中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; render, _parentVnode &#125; = vm.$options;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (_parentVnode) &#123;</span><br><span class="line">    vm.$scopedSlots = normalizeScopedSlots(</span><br><span class="line">      _parentVnode.data.scopedSlots,</span><br><span class="line">      vm.$slots,</span><br><span class="line">      vm.$scopedSlots</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set parent vnode. this allows render functions to have access</span></span><br><span class="line">  <span class="comment">// to the data on the placeholder node.</span></span><br><span class="line">  vm.$vnode = _parentVnode;</span><br><span class="line">  <span class="comment">// render self</span></span><br><span class="line">  <span class="keyword">let</span> vnode;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// There's no need to maintain a stack because all render fns are called</span></span><br><span class="line">    <span class="comment">// separately from one another. Nested component's render fns are called</span></span><br><span class="line">    <span class="comment">// when parent component is patched.</span></span><br><span class="line">    currentRenderingInstance = vm;</span><br><span class="line">    vnode = render.call(vm._renderProxy, vm.$createElement);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    handleError(e, vm, <span class="string">`render`</span>);</span><br><span class="line">    <span class="comment">// return error render result,</span></span><br><span class="line">    <span class="comment">// or previous vnode to prevent render error causing blank component</span></span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; vm.$options.renderError) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        vnode = vm.$options.renderError.call(</span><br><span class="line">          vm._renderProxy,</span><br><span class="line">          vm.$createElement,</span><br><span class="line">          e</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        handleError(e, vm, <span class="string">`renderError`</span>);</span><br><span class="line">        vnode = vm._vnode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vnode = vm._vnode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    currentRenderingInstance = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if the returned array contains only a single node, allow it</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vnode) &amp;&amp; vnode.length === <span class="number">1</span>) &#123;</span><br><span class="line">    vnode = vnode[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return empty vnode in case the render function errored out</span></span><br><span class="line">  <span class="keyword">if</span> (!(vnode <span class="keyword">instanceof</span> VNode)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Multiple root nodes returned from render function. Render function '</span> +</span><br><span class="line">          <span class="string">'should return a single root node.'</span>,</span><br><span class="line">        vm</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    vnode = createEmptyVNode();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// set parent</span></span><br><span class="line">  vnode.parent = _parentVnode;</span><br><span class="line">  <span class="keyword">return</span> vnode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这段代码中最重要的就是 <code>render</code> 函数的调用，我们在平时开发中很少使用 <code>render</code> 函数，更多的是使用 <code>template</code> 模版来开发，<code>template</code> 在之前的 <code>mount</code> 函数就被编译成了 <code>render</code> 函数，这个过程很复杂，我们以后再讲。对 <code>render</code> 函数的写法感兴趣的同学可以去官网看一下文档。</p>
<p>回到 _render 函数中的 render 方法的调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vm._renderProxy 在生产环境中是 vm 本身，在开发环境中被代理</span></span><br><span class="line">vnode = render.call(vm._renderProxy, vm.$createElement);</span><br></pre></td></tr></table></figure>

<p>可以看到，<code>render</code> 函数中的 <code>createElement</code> 方法(对这里不了解的可以看下官网中对 <code>render</code> 的使用方法的介绍)就是 <code>vm.$createElement</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initRender</span>(<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// bind the createElement fn to this instance</span></span><br><span class="line">  <span class="comment">// so that we get proper render context inside it.</span></span><br><span class="line">  <span class="comment">// args order: tag, data, children, normalizationType, alwaysNormalize</span></span><br><span class="line">  <span class="comment">// internal version is used by render functions compiled from templates</span></span><br><span class="line">  vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>);</span><br><span class="line">  <span class="comment">// normalization is always applied for the public version, used in</span></span><br><span class="line">  <span class="comment">// user-written render functions.</span></span><br><span class="line">  vm.$createElement = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>vm.$createElement</code> 方法定义是在执行 <code>initRender</code> 方法的时候，到除了 <code>vm.$createElement</code> 方法，还有一个 <code>vm._c</code> 方法，它是被模板编译成的 <code>render</code> 函数使用，而 <code>vm.$createElement</code> 是用户手写 <code>render</code> 方法使用的， 这俩个方法支持的参数相同，并且内部都调用了 <code>createElement</code> 方法。</p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><code>vm._render</code> 最终是通过执行 <code>createElement</code> 方法并返回 <code>vnode</code>，它是一个<code>Virtual DOM</code>。<code>Vue 2.0</code> 相比 <code>Vue 1.0</code> 最大的升级就是利用了 <code>Virtual DOM</code>。因此在分析 <code>createElement</code> 的实现前，我们先了解一下 <code>Virtual DOM</code> 。</p>
<h2 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h2><p>相信大家都有听说过或者接触过 <code>Virtual Dom</code> ，之所以 <code>Virtual Dom</code> 兴起，就是因为原生 <code>DOM</code> 的操作太昂贵了，频繁的操作 DOM 会有性能上的问题。我们可以直观的感受一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> div) &#123;</span><br><span class="line">  str += key + <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br></pre></td></tr></table></figure>

<p><img src="/images/virtualdom-1.png" alt="divAttrs"><br>可以看到，真正的 <code>DOM</code> 元素是非常庞大的，因为浏览器的标准就把 <code>DOM</code> 设计的非常复杂。当我们频繁的去做 <code>DOM</code> 更新，会产生一定的性能问题。</p>
<p><code>Virtual DOM</code> 就是用一个原生的 JS 对象去描述一个 <code>DOM</code> 节点，所以它比创建一个 <code>DOM</code> 的代价要小很多。在 Vue.js 中，<code>Virtual DOM</code> 是用 <code>VNode</code> 这么 <code>Class VNode</code> 来描述的。<code>src/core/vdom/vnode.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  tag: string | <span class="keyword">void</span>;</span><br><span class="line">  data: VNodeData | <span class="keyword">void</span>;</span><br><span class="line">  children: ?<span class="built_in">Array</span>&lt;VNode&gt;;</span><br><span class="line">  text: string | <span class="keyword">void</span>;</span><br><span class="line">  elm: Node | <span class="keyword">void</span>;</span><br><span class="line">  ns: string | <span class="keyword">void</span>;</span><br><span class="line">  context: Component | <span class="keyword">void</span>; <span class="comment">// rendered in this component's scope</span></span><br><span class="line">  key: string | number | <span class="keyword">void</span>;</span><br><span class="line">  componentOptions: VNodeComponentOptions | <span class="keyword">void</span>;</span><br><span class="line">  componentInstance: Component | <span class="keyword">void</span>; <span class="comment">// component instance</span></span><br><span class="line">  parent: VNode | <span class="keyword">void</span>; <span class="comment">// component placeholder node</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// strictly internal</span></span><br><span class="line">  raw: boolean; <span class="comment">// contains raw HTML? (server only)</span></span><br><span class="line">  isStatic: boolean; <span class="comment">// hoisted static node</span></span><br><span class="line">  isRootInsert: boolean; <span class="comment">// necessary for enter transition check</span></span><br><span class="line">  isComment: boolean; <span class="comment">// empty comment placeholder?</span></span><br><span class="line">  isCloned: boolean; <span class="comment">// is a cloned node?</span></span><br><span class="line">  isOnce: boolean; <span class="comment">// is a v-once node?</span></span><br><span class="line">  asyncFactory: <span class="built_in">Function</span> | <span class="keyword">void</span>; <span class="comment">// async component factory function</span></span><br><span class="line">  asyncMeta: <span class="built_in">Object</span> | <span class="keyword">void</span>;</span><br><span class="line">  isAsyncPlaceholder: boolean;</span><br><span class="line">  ssrContext: <span class="built_in">Object</span> | <span class="keyword">void</span>;</span><br><span class="line">  fnContext: Component | <span class="keyword">void</span>; <span class="comment">// real context vm for functional nodes</span></span><br><span class="line">  fnOptions: ?ComponentOptions; <span class="comment">// for SSR caching</span></span><br><span class="line">  devtoolsMeta: ?<span class="built_in">Object</span>; <span class="comment">// used to store functional render context for devtools</span></span><br><span class="line">  fnScopeId: ?string; <span class="comment">// functional scope id support</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    tag?: string,</span><br><span class="line">    data?: VNodeData,</span><br><span class="line">    children?: ?Array&lt;VNode&gt;,</span><br><span class="line">    text?: string,</span><br><span class="line">    elm?: Node,</span><br><span class="line">    context?: Component,</span><br><span class="line">    componentOptions?: VNodeComponentOptions,</span><br><span class="line">    asyncFactory?: Function</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tag = tag</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">    <span class="keyword">this</span>.children = children</span><br><span class="line">    <span class="keyword">this</span>.text = text</span><br><span class="line">    <span class="keyword">this</span>.elm = elm</span><br><span class="line">    <span class="keyword">this</span>.ns = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.fnContext = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.fnOptions = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.fnScopeId = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.key = data &amp;&amp; data.key</span><br><span class="line">    <span class="keyword">this</span>.componentOptions = componentOptions</span><br><span class="line">    <span class="keyword">this</span>.componentInstance = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.raw = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isStatic = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isRootInsert = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.isComment = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isCloned = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isOnce = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.asyncFactory = asyncFactory</span><br><span class="line">    <span class="keyword">this</span>.asyncMeta = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.isAsyncPlaceholder = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// DEPRECATED: alias for componentInstance for backwards compat.</span></span><br><span class="line">  <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">  <span class="keyword">get</span> child (): Component | void &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.componentInstance</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><code>Vue</code> 定义的 <code>Virtual DOM</code> 看起来很复杂，其实并没有那么复杂，只因为这里面包含了很多 <code>Vue</code> 的特性，所以才显得复杂。 <code>Vue.js</code> 中 <code>Virtual DOM</code> 是借鉴了一个开源库 <code>snabbdom</code> 的实现，然后加入了一些 Vue.js 特色的东西。</p>
<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p><code>VNode</code> 其实就是对真的 <code>DOM</code> 的一种抽象，它的核心定义无非就几个关键属性，标签名、数据、子节点、键值等，其它属性都是用来扩展 VNode 的灵活性以及实现一些特殊功能的。由于 <code>VNode</code> 只是用来映射到真实 <code>DOM</code> 的渲染，不需要包含操作 <code>DOM</code> 的方法，因此它是非常轻量和简单的。</p>
<p><code>Virtual DOM</code> 除了它的数据结构的定义，映射到真实的 <code>DOM</code> 实际上要经历 <code>VNode</code> 的 <code>create</code> <code>、diff</code> <code>、patch</code> 等过程。那么在 <code>Vue.js</code> <code>中，VNode</code> 的创建是通过之前提到的 <code>createElement</code> 方法创建的，我们接下来分析这部分的实现。</p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue源码解析</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>源码解析</tag>
      </tags>
  </entry>
</search>
